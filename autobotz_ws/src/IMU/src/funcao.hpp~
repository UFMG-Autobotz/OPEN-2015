#include <ros/ros.h>	
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>	
#include <sensor_msgs/image_encodings.h>	
#include <opencv2/imgproc/imgproc.hpp>	
#include <opencv2/highgui/highgui.hpp>	
#include <opencv2/opencv.hpp>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>  
#include <string.h> 
#include <iostream> 
#include <sensor_msgs/Image.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <X11/keysym.h>
#include <cv.h> 
#include <highgui.h>
#include <cxcore.h>
#include "opencv/cvaux.h"
#include "opencv/highgui.h"
#include "opencv/cxcore.h"
#include "opencv2/core/core.hpp"
#include <sstream>
#include "beginner_tutorials/Num.h"
//#include <geometry_msgs/Point.h>

using namespace cv;
using namespace std;

extern Mat image_rgb; //Imagem inicial
//extern Mat image_HSV;
//extern Mat img;
//extern Mat H;
//extern Mat S;
//extern Mat V;
//extern int H_min, H_max, V_min, V_max, S_min, S_max;
extern Point center;
extern int distancia;
//extern ros::Publisher pub2;
//extern image_transport::Publisher pub

void imageCallback(const sensor_msgs::ImageConstPtr& image);
void RGBtoHSV();
void morphOps(Mat &thresh);
void CriaTrackbar();
char* itoa(int value, char* result, int base);
void Laranja();
